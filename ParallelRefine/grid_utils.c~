
#include "grid_utils.h"
#include <stdio.h>
#include <mpi.h>

extern int P, Q, rank, size;
extern int[2] rcrds, crds; 

void initFineGrid(double** mat, int nrows, int ncols)
{
  int i;
  int bottom = 40;
  int left = 20;
  // left rows initial conditions
  if(rcrds[1] == 0)
    {
      for ( i = 1; i < nrows - 1; i+=2)
	{
	  mat[i][1] = left;
	}
      for (i = 2; i < nrows - 1; i+=2)
	{
	  mat[i][1] = left/2;
	}
    }

  // bottom rows initial conditions
  if(rcrds[0] == P-1)
    {
      for ( i = 1; i < ncols - 1; i+=2)
	{
	  mat[nrows-2][i] = bottom;//100
	}
      for (i = 2; i < ncols - 1; i+=2)
	{
	  mat[nrows-2][i] = bottom/2;
	}
    } 
}

void initGrid(double** mat, int nrows, int ncols, int crse_rows_cutoff, int crse_cols_cutoff)
{
  int i;
  if (rank!= 2){
  //left and right rows initial conditions
  if(crds[1] == 0)
    {
      //  for ( i = 1; i < nrows - crse_rows_cutoff +1; i++)
      for ( i = 1; i < nrows - 1; i++)
	{
	  mat[i][1] = 20;//0
	}
    }
  else if(crds[1] == P - 1)
    {
      for (i = 1; i <nrows - 1; i++)
	{ 
	  mat[i][ncols - 2] = 30;//100
	}
    }

  //bottom and top rows initial conditions
  if(crds[0] == 0)
    {
      for ( i = 1; i < ncols - 1; i++)
	{
	  mat[1][i] = 50;//0
	}
    }
  else if(crds[0] == Q-1)
    {
      for ( i = 1; i < ncols - 1; i++)
	{
	  mat[nrows-2][i] = 40;//100
	}
    }
}
}

void printGrid(double** mat, int nrows, int ncols)
{
  int i, j, k;

  for(k=0; k<size; k++) {
    if(rank==k) {
      printf("\nRank %d:\n", rank);
      /* printf("%f\n ", mat[1][1]); */
      /* printf("%f\n ", mat[5][cols-2]); */
      for (i = 0; i < nrows; i++) {
        for (j = 0; j < ncols; j++) {
          printf("%lf ", mat[i][j]);
        }
        printf("\n");
      }
    }
  }

}
